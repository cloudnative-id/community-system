// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/postgres/postgres.go

// Package postgres_mock is a generated GoMock package.
package postgres_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
)

// MockPostgresClientInterface is a mock of PostgresClientInterface interface.
type MockPostgresClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresClientInterfaceMockRecorder
}

// MockPostgresClientInterfaceMockRecorder is the mock recorder for MockPostgresClientInterface.
type MockPostgresClientInterfaceMockRecorder struct {
	mock *MockPostgresClientInterface
}

// NewMockPostgresClientInterface creates a new mock instance.
func NewMockPostgresClientInterface(ctrl *gomock.Controller) *MockPostgresClientInterface {
	mock := &MockPostgresClientInterface{ctrl: ctrl}
	mock.recorder = &MockPostgresClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresClientInterface) EXPECT() *MockPostgresClientInterfaceMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method.
func (m *MockPostgresClientInterface) AutoMigrate(dst ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockPostgresClientInterfaceMockRecorder) AutoMigrate(dst ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockPostgresClientInterface)(nil).AutoMigrate), dst...)
}

// Clauses mocks base method.
func (m *MockPostgresClientInterface) Clauses(conds ...clause.Expression) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockPostgresClientInterfaceMockRecorder) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockPostgresClientInterface)(nil).Clauses), conds...)
}

// Create mocks base method.
func (m *MockPostgresClientInterface) Create(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostgresClientInterfaceMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostgresClientInterface)(nil).Create), value)
}

// Find mocks base method.
func (m *MockPostgresClientInterface) Find(dest interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockPostgresClientInterfaceMockRecorder) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPostgresClientInterface)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockPostgresClientInterface) First(dest interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockPostgresClientInterfaceMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockPostgresClientInterface)(nil).First), varargs...)
}

// Save mocks base method.
func (m *MockPostgresClientInterface) Save(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPostgresClientInterfaceMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPostgresClientInterface)(nil).Save), value)
}

// Where mocks base method.
func (m *MockPostgresClientInterface) Where(query interface{}, args ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockPostgresClientInterfaceMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockPostgresClientInterface)(nil).Where), varargs...)
}
