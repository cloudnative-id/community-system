// Code generated by go-swagger; DO NOT EDIT.

package meetup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchMeetupHandlerFunc turns a function with the right signature into a patch meetup handler
type PatchMeetupHandlerFunc func(PatchMeetupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchMeetupHandlerFunc) Handle(params PatchMeetupParams) middleware.Responder {
	return fn(params)
}

// PatchMeetupHandler interface for that can handle valid patch meetup params
type PatchMeetupHandler interface {
	Handle(PatchMeetupParams) middleware.Responder
}

// NewPatchMeetup creates a new http.Handler for the patch meetup operation
func NewPatchMeetup(ctx *middleware.Context, handler PatchMeetupHandler) *PatchMeetup {
	return &PatchMeetup{Context: ctx, Handler: handler}
}

/* PatchMeetup swagger:route PATCH /meetups/{meetup_id} meetup patchMeetup

Patch meetup data.

update meetup

*/
type PatchMeetup struct {
	Context *middleware.Context
	Handler PatchMeetupHandler
}

func (o *PatchMeetup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchMeetupParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
