// Code generated by go-swagger; DO NOT EDIT.

package sponsor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutSponsorHandlerFunc turns a function with the right signature into a put sponsor handler
type PutSponsorHandlerFunc func(PutSponsorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutSponsorHandlerFunc) Handle(params PutSponsorParams) middleware.Responder {
	return fn(params)
}

// PutSponsorHandler interface for that can handle valid put sponsor params
type PutSponsorHandler interface {
	Handle(PutSponsorParams) middleware.Responder
}

// NewPutSponsor creates a new http.Handler for the put sponsor operation
func NewPutSponsor(ctx *middleware.Context, handler PutSponsorHandler) *PutSponsor {
	return &PutSponsor{Context: ctx, Handler: handler}
}

/* PutSponsor swagger:route PUT /meetups/sponsors sponsor putSponsor

Put sponsor data.

create sponsor

*/
type PutSponsor struct {
	Context *middleware.Context
	Handler PutSponsorHandler
}

func (o *PutSponsor) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutSponsorParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
