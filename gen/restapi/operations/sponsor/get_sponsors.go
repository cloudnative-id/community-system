// Code generated by go-swagger; DO NOT EDIT.

package sponsor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSponsorsHandlerFunc turns a function with the right signature into a get sponsors handler
type GetSponsorsHandlerFunc func(GetSponsorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSponsorsHandlerFunc) Handle(params GetSponsorsParams) middleware.Responder {
	return fn(params)
}

// GetSponsorsHandler interface for that can handle valid get sponsors params
type GetSponsorsHandler interface {
	Handle(GetSponsorsParams) middleware.Responder
}

// NewGetSponsors creates a new http.Handler for the get sponsors operation
func NewGetSponsors(ctx *middleware.Context, handler GetSponsorsHandler) *GetSponsors {
	return &GetSponsors{Context: ctx, Handler: handler}
}

/* GetSponsors swagger:route GET /meetups/sponsors sponsor getSponsors

Returns a list of sponsors.

A JSON array of sponsors

*/
type GetSponsors struct {
	Context *middleware.Context
	Handler GetSponsorsHandler
}

func (o *GetSponsors) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSponsorsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
