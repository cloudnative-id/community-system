// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Meetup meetup
//
// swagger:model Meetup
type Meetup struct {

	// city
	// Required: true
	City *string `json:"city"`

	// country
	// Required: true
	Country *string `json:"country"`

	// day
	// Required: true
	Day *int64 `json:"day"`

	// image
	// Required: true
	Image *string `json:"image"`

	// location
	// Required: true
	Location *string `json:"location"`

	// month
	// Required: true
	Month *int64 `json:"month"`

	// registration Url
	// Required: true
	RegistrationURL *string `json:"registrationUrl"`

	// speaker
	Speaker []*Speaker `json:"speaker"`

	// sponsors
	Sponsors []*Sponsor `json:"sponsors"`

	// status
	Status bool `json:"status,omitempty"`

	// tags
	// Required: true
	Tags []string `json:"tags"`

	// time
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// year
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this meetup
func (m *Meetup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeaker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSponsors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Meetup) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateRegistrationURL(formats strfmt.Registry) error {

	if err := validate.Required("registrationUrl", "body", m.RegistrationURL); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateSpeaker(formats strfmt.Registry) error {
	if swag.IsZero(m.Speaker) { // not required
		return nil
	}

	for i := 0; i < len(m.Speaker); i++ {
		if swag.IsZero(m.Speaker[i]) { // not required
			continue
		}

		if m.Speaker[i] != nil {
			if err := m.Speaker[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("speaker" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meetup) validateSponsors(formats strfmt.Registry) error {
	if swag.IsZero(m.Sponsors) { // not required
		return nil
	}

	for i := 0; i < len(m.Sponsors); i++ {
		if swag.IsZero(m.Sponsors[i]) { // not required
			continue
		}

		if m.Sponsors[i] != nil {
			if err := m.Sponsors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sponsors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meetup) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Meetup) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this meetup based on the context it is used
func (m *Meetup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpeaker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSponsors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Meetup) contextValidateSpeaker(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Speaker); i++ {

		if m.Speaker[i] != nil {
			if err := m.Speaker[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("speaker" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meetup) contextValidateSponsors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sponsors); i++ {

		if m.Sponsors[i] != nil {
			if err := m.Sponsors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sponsors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Meetup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Meetup) UnmarshalBinary(b []byte) error {
	var res Meetup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
